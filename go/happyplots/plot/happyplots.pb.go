// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: happyplots.proto

package plot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//磁盘媒体类型， 固态硬盘SSD和机械硬盘HDD
type DiskMediaType int32

const (
	DiskMediaType_SSD DiskMediaType = 0
	DiskMediaType_HDD DiskMediaType = 1
)

// Enum value maps for DiskMediaType.
var (
	DiskMediaType_name = map[int32]string{
		0: "SSD",
		1: "HDD",
	}
	DiskMediaType_value = map[string]int32{
		"SSD": 0,
		"HDD": 1,
	}
)

func (x DiskMediaType) Enum() *DiskMediaType {
	p := new(DiskMediaType)
	*p = x
	return p
}

func (x DiskMediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskMediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_happyplots_proto_enumTypes[0].Descriptor()
}

func (DiskMediaType) Type() protoreflect.EnumType {
	return &file_happyplots_proto_enumTypes[0]
}

func (x DiskMediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskMediaType.Descriptor instead.
func (DiskMediaType) EnumDescriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{0}
}

//节点状态，在线和离线
type NodeState int32

const (
	NodeState_Offline NodeState = 0
	NodeState_Online  NodeState = 1
)

// Enum value maps for NodeState.
var (
	NodeState_name = map[int32]string{
		0: "Offline",
		1: "Online",
	}
	NodeState_value = map[string]int32{
		"Offline": 0,
		"Online":  1,
	}
)

func (x NodeState) Enum() *NodeState {
	p := new(NodeState)
	*p = x
	return p
}

func (x NodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_happyplots_proto_enumTypes[1].Descriptor()
}

func (NodeState) Type() protoreflect.EnumType {
	return &file_happyplots_proto_enumTypes[1]
}

func (x NodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeState.Descriptor instead.
func (NodeState) EnumDescriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{1}
}

//任务阶段，非plot阶段
type JobPhase int32

const (
	JobPhase_Created   JobPhase = 0
	JobPhase_Scheduled JobPhase = 1
	JobPhase_Running   JobPhase = 2
	JobPhase_Succeed   JobPhase = 3
)

// Enum value maps for JobPhase.
var (
	JobPhase_name = map[int32]string{
		0: "Created",
		1: "Scheduled",
		2: "Running",
		3: "Succeed",
	}
	JobPhase_value = map[string]int32{
		"Created":   0,
		"Scheduled": 1,
		"Running":   2,
		"Succeed":   3,
	}
)

func (x JobPhase) Enum() *JobPhase {
	p := new(JobPhase)
	*p = x
	return p
}

func (x JobPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_happyplots_proto_enumTypes[2].Descriptor()
}

func (JobPhase) Type() protoreflect.EnumType {
	return &file_happyplots_proto_enumTypes[2]
}

func (x JobPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobPhase.Descriptor instead.
func (JobPhase) EnumDescriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{2}
}

//卷状态 卷的状态信息
type VolumeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64 `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	Used  uint64 `protobuf:"varint,2,opt,name=Used,proto3" json:"Used,omitempty"`
}

func (x *VolumeStatus) Reset() {
	*x = VolumeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeStatus) ProtoMessage() {}

func (x *VolumeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeStatus.ProtoReflect.Descriptor instead.
func (*VolumeStatus) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{0}
}

func (x *VolumeStatus) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VolumeStatus) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

//卷 保存卷信息
type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string        `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Path      string        `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	MediaType DiskMediaType `protobuf:"varint,3,opt,name=MediaType,proto3,enum=plot.DiskMediaType" json:"MediaType,omitempty"`
	Status    *VolumeStatus `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{1}
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Volume) GetMediaType() DiskMediaType {
	if x != nil {
		return x.MediaType
	}
	return DiskMediaType_SSD
}

func (x *Volume) GetStatus() *VolumeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

//节点状态
type NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      NodeState `protobuf:"varint,1,opt,name=State,proto3,enum=plot.NodeState" json:"State,omitempty"`
	RunningJob []uint64  `protobuf:"varint,2,rep,packed,name=RunningJob,proto3" json:"RunningJob,omitempty"`
	Registed   bool      `protobuf:"varint,3,opt,name=Registed,proto3" json:"Registed,omitempty"`
	RegistedAt uint64    `protobuf:"varint,4,opt,name=RegistedAt,proto3" json:"RegistedAt,omitempty"`
	UpdatedAt  uint64    `protobuf:"varint,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{2}
}

func (x *NodeStatus) GetState() NodeState {
	if x != nil {
		return x.State
	}
	return NodeState_Offline
}

func (x *NodeStatus) GetRunningJob() []uint64 {
	if x != nil {
		return x.RunningJob
	}
	return nil
}

func (x *NodeStatus) GetRegisted() bool {
	if x != nil {
		return x.Registed
	}
	return false
}

func (x *NodeStatus) GetRegistedAt() uint64 {
	if x != nil {
		return x.RegistedAt
	}
	return 0
}

func (x *NodeStatus) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

//节点
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string      `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	IP           string      `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	CPU          uint32      `protobuf:"varint,3,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Memory       uint64      `protobuf:"varint,4,opt,name=Memory,proto3" json:"Memory,omitempty"`
	CacheVolumes []*Volume   `protobuf:"bytes,5,rep,name=CacheVolumes,proto3" json:"CacheVolumes,omitempty"`
	PlotVolumes  []*Volume   `protobuf:"bytes,6,rep,name=PlotVolumes,proto3" json:"PlotVolumes,omitempty"`
	Status       *NodeStatus `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Node) GetCPU() uint32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *Node) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Node) GetCacheVolumes() []*Volume {
	if x != nil {
		return x.CacheVolumes
	}
	return nil
}

func (x *Node) GetPlotVolumes() []*Volume {
	if x != nil {
		return x.PlotVolumes
	}
	return nil
}

func (x *Node) GetStatus() *NodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

//节点列表
type NodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Node `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (x *NodeList) Reset() {
	*x = NodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeList) ProtoMessage() {}

func (x *NodeList) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeList.ProtoReflect.Descriptor instead.
func (*NodeList) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{4}
}

func (x *NodeList) GetItems() []*Node {
	if x != nil {
		return x.Items
	}
	return nil
}

//任务状态
type JobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase    JobPhase `protobuf:"varint,1,opt,name=Phase,proto3,enum=plot.JobPhase" json:"Phase,omitempty"`
	Progress int32    `protobuf:"varint,2,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Node     string   `protobuf:"bytes,3,opt,name=Node,proto3" json:"Node,omitempty"`
}

func (x *JobStatus) Reset() {
	*x = JobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatus) ProtoMessage() {}

func (x *JobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatus.ProtoReflect.Descriptor instead.
func (*JobStatus) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{5}
}

func (x *JobStatus) GetPhase() JobPhase {
	if x != nil {
		return x.Phase
	}
	return JobPhase_Created
}

func (x *JobStatus) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *JobStatus) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

//任务资源 为任务分配资源
type JobResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPU       uint32 `protobuf:"varint,1,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Memory    uint64 `protobuf:"varint,2,opt,name=Memory,proto3" json:"Memory,omitempty"`
	CacheSize uint64 `protobuf:"varint,3,opt,name=CacheSize,proto3" json:"CacheSize,omitempty"`
	PlotSize  uint64 `protobuf:"varint,4,opt,name=PlotSize,proto3" json:"PlotSize,omitempty"`
}

func (x *JobResource) Reset() {
	*x = JobResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResource) ProtoMessage() {}

func (x *JobResource) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResource.ProtoReflect.Descriptor instead.
func (*JobResource) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{6}
}

func (x *JobResource) GetCPU() uint32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *JobResource) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *JobResource) GetCacheSize() uint64 {
	if x != nil {
		return x.CacheSize
	}
	return 0
}

func (x *JobResource) GetPlotSize() uint64 {
	if x != nil {
		return x.PlotSize
	}
	return 0
}

//任务规约
type JobSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K           uint32       `protobuf:"varint,1,opt,name=K,proto3" json:"K,omitempty"`
	Bucket      uint32       `protobuf:"varint,2,opt,name=Bucket,proto3" json:"Bucket,omitempty"`
	Fingerprint uint32       `protobuf:"varint,3,opt,name=Fingerprint,proto3" json:"Fingerprint,omitempty"`
	Cache1      string       `protobuf:"bytes,4,opt,name=Cache1,proto3" json:"Cache1,omitempty"`
	Cache2      string       `protobuf:"bytes,5,opt,name=Cache2,proto3" json:"Cache2,omitempty"`
	Plot        string       `protobuf:"bytes,6,opt,name=Plot,proto3" json:"Plot,omitempty"`
	Resource    *JobResource `protobuf:"bytes,7,opt,name=Resource,proto3" json:"Resource,omitempty"`
}

func (x *JobSpec) Reset() {
	*x = JobSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSpec) ProtoMessage() {}

func (x *JobSpec) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSpec.ProtoReflect.Descriptor instead.
func (*JobSpec) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{7}
}

func (x *JobSpec) GetK() uint32 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *JobSpec) GetBucket() uint32 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

func (x *JobSpec) GetFingerprint() uint32 {
	if x != nil {
		return x.Fingerprint
	}
	return 0
}

func (x *JobSpec) GetCache1() string {
	if x != nil {
		return x.Cache1
	}
	return ""
}

func (x *JobSpec) GetCache2() string {
	if x != nil {
		return x.Cache2
	}
	return ""
}

func (x *JobSpec) GetPlot() string {
	if x != nil {
		return x.Plot
	}
	return ""
}

func (x *JobSpec) GetResource() *JobResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

//任务
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string     `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Spec   *JobSpec   `protobuf:"bytes,2,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Status *JobStatus `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{8}
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetSpec() *JobSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Job) GetStatus() *JobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

//任务列表
type JobList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Job `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (x *JobList) Reset() {
	*x = JobList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobList) ProtoMessage() {}

func (x *JobList) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobList.ProtoReflect.Descriptor instead.
func (*JobList) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{9}
}

func (x *JobList) GetItems() []*Job {
	if x != nil {
		return x.Items
	}
	return nil
}

//响应信息，通用
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{10}
}

func (x *Response) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//任务筛选，用于查询
type JobFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheduled bool `protobuf:"varint,1,opt,name=Scheduled,proto3" json:"Scheduled,omitempty"`
	Succeed   bool `protobuf:"varint,2,opt,name=Succeed,proto3" json:"Succeed,omitempty"`
}

func (x *JobFilter) Reset() {
	*x = JobFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobFilter) ProtoMessage() {}

func (x *JobFilter) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobFilter.ProtoReflect.Descriptor instead.
func (*JobFilter) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{11}
}

func (x *JobFilter) GetScheduled() bool {
	if x != nil {
		return x.Scheduled
	}
	return false
}

func (x *JobFilter) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

//plot容量，用于添加任务，添加多少容量的plot，后台自动创建足够容量的任务
type PlotCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size uint64   `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	K    []uint32 `protobuf:"varint,2,rep,packed,name=K,proto3" json:"K,omitempty"`
}

func (x *PlotCapacity) Reset() {
	*x = PlotCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlotCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlotCapacity) ProtoMessage() {}

func (x *PlotCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlotCapacity.ProtoReflect.Descriptor instead.
func (*PlotCapacity) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{12}
}

func (x *PlotCapacity) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PlotCapacity) GetK() []uint32 {
	if x != nil {
		return x.K
	}
	return nil
}

//标准请求信息
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_happyplots_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_happyplots_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_happyplots_proto_rawDescGZIP(), []int{13}
}

func (x *Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_happyplots_proto protoreflect.FileDescriptor

var file_happyplots_proto_rawDesc = []byte{
	0x0a, 0x10, 0x68, 0x61, 0x70, 0x70, 0x79, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x70, 0x6c, 0x6f, 0x74, 0x22, 0x38, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x55, 0x73,
	0x65, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x50, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x43, 0x50, 0x55, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x0c, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x0b, 0x50, 0x6c, 0x6f, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x0b, 0x50, 0x6c, 0x6f, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2c, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x61, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x50, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x07,
	0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x4b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x01, 0x4b, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x43, 0x61, 0x63, 0x68, 0x65, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x43, 0x61, 0x63, 0x68, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x61, 0x63, 0x68, 0x65, 0x32, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x6c, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x6c, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x65, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x6c,
	0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x27, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2a, 0x0a, 0x07, 0x4a, 0x6f, 0x62,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x05,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x38, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x43, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x0c, 0x50, 0x6c, 0x6f, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x4b, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x01, 0x4b, 0x22, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x21, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x53, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x48, 0x44, 0x44, 0x10, 0x01, 0x2a, 0x24, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x2a, 0x40,
	0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x10, 0x03,
	0x32, 0x8e, 0x02, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x07, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x70, 0x6c, 0x6f, 0x74,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e,
	0x4a, 0x6f, 0x62, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0d, 0x2e, 0x70,
	0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x6c,
	0x6f, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x4a,
	0x6f, 0x62, 0x73, 0x12, 0x0f, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x12, 0x2e,
	0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x6c, 0x6f, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x8b, 0x01, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x0d,
	0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x28, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x09,
	0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x6f, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4b, 0x69, 0x6c,
	0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x09, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x1a,
	0x0e, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x0c, 0x5a, 0x0a, 0x70, 0x6c, 0x6f, 0x74, 0x2f, 0x3b, 0x70, 0x6c, 0x6f, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_happyplots_proto_rawDescOnce sync.Once
	file_happyplots_proto_rawDescData = file_happyplots_proto_rawDesc
)

func file_happyplots_proto_rawDescGZIP() []byte {
	file_happyplots_proto_rawDescOnce.Do(func() {
		file_happyplots_proto_rawDescData = protoimpl.X.CompressGZIP(file_happyplots_proto_rawDescData)
	})
	return file_happyplots_proto_rawDescData
}

var file_happyplots_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_happyplots_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_happyplots_proto_goTypes = []interface{}{
	(DiskMediaType)(0),   // 0: plot.DiskMediaType
	(NodeState)(0),       // 1: plot.NodeState
	(JobPhase)(0),        // 2: plot.JobPhase
	(*VolumeStatus)(nil), // 3: plot.VolumeStatus
	(*Volume)(nil),       // 4: plot.Volume
	(*NodeStatus)(nil),   // 5: plot.NodeStatus
	(*Node)(nil),         // 6: plot.Node
	(*NodeList)(nil),     // 7: plot.NodeList
	(*JobStatus)(nil),    // 8: plot.JobStatus
	(*JobResource)(nil),  // 9: plot.JobResource
	(*JobSpec)(nil),      // 10: plot.JobSpec
	(*Job)(nil),          // 11: plot.Job
	(*JobList)(nil),      // 12: plot.JobList
	(*Response)(nil),     // 13: plot.Response
	(*JobFilter)(nil),    // 14: plot.JobFilter
	(*PlotCapacity)(nil), // 15: plot.PlotCapacity
	(*Request)(nil),      // 16: plot.Request
}
var file_happyplots_proto_depIdxs = []int32{
	0,  // 0: plot.Volume.MediaType:type_name -> plot.DiskMediaType
	3,  // 1: plot.Volume.Status:type_name -> plot.VolumeStatus
	1,  // 2: plot.NodeStatus.State:type_name -> plot.NodeState
	4,  // 3: plot.Node.CacheVolumes:type_name -> plot.Volume
	4,  // 4: plot.Node.PlotVolumes:type_name -> plot.Volume
	5,  // 5: plot.Node.Status:type_name -> plot.NodeStatus
	6,  // 6: plot.NodeList.Items:type_name -> plot.Node
	2,  // 7: plot.JobStatus.Phase:type_name -> plot.JobPhase
	9,  // 8: plot.JobSpec.Resource:type_name -> plot.JobResource
	10, // 9: plot.Job.Spec:type_name -> plot.JobSpec
	8,  // 10: plot.Job.Status:type_name -> plot.JobStatus
	11, // 11: plot.JobList.Items:type_name -> plot.Job
	6,  // 12: plot.Scheduler.Registe:input_type -> plot.Node
	11, // 13: plot.Scheduler.UpdateJobStatus:input_type -> plot.Job
	6,  // 14: plot.Scheduler.UpdateNodeStatus:input_type -> plot.Node
	16, // 15: plot.Scheduler.Nodes:input_type -> plot.Request
	14, // 16: plot.Scheduler.Jobs:input_type -> plot.JobFilter
	15, // 17: plot.Scheduler.AddJob:input_type -> plot.PlotCapacity
	16, // 18: plot.NodeService.HeartBeat:input_type -> plot.Request
	11, // 19: plot.NodeService.AllocateJob:input_type -> plot.Job
	11, // 20: plot.NodeService.KillJob:input_type -> plot.Job
	13, // 21: plot.Scheduler.Registe:output_type -> plot.Response
	13, // 22: plot.Scheduler.UpdateJobStatus:output_type -> plot.Response
	13, // 23: plot.Scheduler.UpdateNodeStatus:output_type -> plot.Response
	7,  // 24: plot.Scheduler.Nodes:output_type -> plot.NodeList
	12, // 25: plot.Scheduler.Jobs:output_type -> plot.JobList
	13, // 26: plot.Scheduler.AddJob:output_type -> plot.Response
	5,  // 27: plot.NodeService.HeartBeat:output_type -> plot.NodeStatus
	13, // 28: plot.NodeService.AllocateJob:output_type -> plot.Response
	13, // 29: plot.NodeService.KillJob:output_type -> plot.Response
	21, // [21:30] is the sub-list for method output_type
	12, // [12:21] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_happyplots_proto_init() }
func file_happyplots_proto_init() {
	if File_happyplots_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_happyplots_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlotCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_happyplots_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_happyplots_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_happyplots_proto_goTypes,
		DependencyIndexes: file_happyplots_proto_depIdxs,
		EnumInfos:         file_happyplots_proto_enumTypes,
		MessageInfos:      file_happyplots_proto_msgTypes,
	}.Build()
	File_happyplots_proto = out.File
	file_happyplots_proto_rawDesc = nil
	file_happyplots_proto_goTypes = nil
	file_happyplots_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	Registe(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Response, error)
	UpdateJobStatus(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Response, error)
	UpdateNodeStatus(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Response, error)
	Nodes(ctx context.Context, in *Request, opts ...grpc.CallOption) (*NodeList, error)
	Jobs(ctx context.Context, in *JobFilter, opts ...grpc.CallOption) (*JobList, error)
	AddJob(ctx context.Context, in *PlotCapacity, opts ...grpc.CallOption) (*Response, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) Registe(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/plot.Scheduler/Registe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateJobStatus(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/plot.Scheduler/UpdateJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateNodeStatus(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/plot.Scheduler/UpdateNodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Nodes(ctx context.Context, in *Request, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := c.cc.Invoke(ctx, "/plot.Scheduler/Nodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Jobs(ctx context.Context, in *JobFilter, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := c.cc.Invoke(ctx, "/plot.Scheduler/Jobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) AddJob(ctx context.Context, in *PlotCapacity, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/plot.Scheduler/AddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	Registe(context.Context, *Node) (*Response, error)
	UpdateJobStatus(context.Context, *Job) (*Response, error)
	UpdateNodeStatus(context.Context, *Node) (*Response, error)
	Nodes(context.Context, *Request) (*NodeList, error)
	Jobs(context.Context, *JobFilter) (*JobList, error)
	AddJob(context.Context, *PlotCapacity) (*Response, error)
}

// UnimplementedSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (*UnimplementedSchedulerServer) Registe(context.Context, *Node) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registe not implemented")
}
func (*UnimplementedSchedulerServer) UpdateJobStatus(context.Context, *Job) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobStatus not implemented")
}
func (*UnimplementedSchedulerServer) UpdateNodeStatus(context.Context, *Node) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeStatus not implemented")
}
func (*UnimplementedSchedulerServer) Nodes(context.Context, *Request) (*NodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nodes not implemented")
}
func (*UnimplementedSchedulerServer) Jobs(context.Context, *JobFilter) (*JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Jobs not implemented")
}
func (*UnimplementedSchedulerServer) AddJob(context.Context, *PlotCapacity) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJob not implemented")
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_Registe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Registe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plot.Scheduler/Registe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Registe(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plot.Scheduler/UpdateJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateJobStatus(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plot.Scheduler/UpdateNodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateNodeStatus(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plot.Scheduler/Nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Nodes(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Jobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Jobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plot.Scheduler/Jobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Jobs(ctx, req.(*JobFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_AddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlotCapacity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).AddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plot.Scheduler/AddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).AddJob(ctx, req.(*PlotCapacity))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plot.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registe",
			Handler:    _Scheduler_Registe_Handler,
		},
		{
			MethodName: "UpdateJobStatus",
			Handler:    _Scheduler_UpdateJobStatus_Handler,
		},
		{
			MethodName: "UpdateNodeStatus",
			Handler:    _Scheduler_UpdateNodeStatus_Handler,
		},
		{
			MethodName: "Nodes",
			Handler:    _Scheduler_Nodes_Handler,
		},
		{
			MethodName: "Jobs",
			Handler:    _Scheduler_Jobs_Handler,
		},
		{
			MethodName: "AddJob",
			Handler:    _Scheduler_AddJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "happyplots.proto",
}

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeServiceClient interface {
	HeartBeat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*NodeStatus, error)
	AllocateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Response, error)
	KillJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Response, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) HeartBeat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*NodeStatus, error) {
	out := new(NodeStatus)
	err := c.cc.Invoke(ctx, "/plot.NodeService/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) AllocateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/plot.NodeService/AllocateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) KillJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/plot.NodeService/KillJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
type NodeServiceServer interface {
	HeartBeat(context.Context, *Request) (*NodeStatus, error)
	AllocateJob(context.Context, *Job) (*Response, error)
	KillJob(context.Context, *Job) (*Response, error)
}

// UnimplementedNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (*UnimplementedNodeServiceServer) HeartBeat(context.Context, *Request) (*NodeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (*UnimplementedNodeServiceServer) AllocateJob(context.Context, *Job) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateJob not implemented")
}
func (*UnimplementedNodeServiceServer) KillJob(context.Context, *Job) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillJob not implemented")
}

func RegisterNodeServiceServer(s *grpc.Server, srv NodeServiceServer) {
	s.RegisterService(&_NodeService_serviceDesc, srv)
}

func _NodeService_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plot.NodeService/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).HeartBeat(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_AllocateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).AllocateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plot.NodeService/AllocateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).AllocateJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_KillJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).KillJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plot.NodeService/KillJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).KillJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plot.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _NodeService_HeartBeat_Handler,
		},
		{
			MethodName: "AllocateJob",
			Handler:    _NodeService_AllocateJob_Handler,
		},
		{
			MethodName: "KillJob",
			Handler:    _NodeService_KillJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "happyplots.proto",
}
